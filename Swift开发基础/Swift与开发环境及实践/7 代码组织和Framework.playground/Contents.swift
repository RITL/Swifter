//: Playground - noun: a place where people can play

import UIKit


/*
 Apple 为了 iOS 平台的安全性考虑，是不允许动态链接非系统的框架的。
 
 因此在 app 开发中我们所使用的第三方框架如果是以库文件的方式提供的话，
 一定都是需要链接并打包进最后的二进制可执行文件中的静态库。
 
 最初级和原始的静态库是以 .a 的二进制文件加上一些 .h 的头文件进行定义的形式提供的
 这样的静态库在使用时比较麻烦
 我们除了将其添加到项目和配置链接外，还需要进行指明头文件位置等工作。
 
 这样造成的结果不仅是添加起来比较麻烦，而且因为头文件的路径可能在不同的环境下会存在不一样的情况
 而造成项目在换一个开发环境后就因为配置问题造成无法编译。
 
 有过这种经历的开发人员都知道
 调配开发环境是一件非常让人讨厌和耗费时间的事情。
 */

/*
 而 Apple 自己的框架都是 .framework 为后缀的动态框架，是集成在操作系统中的
 我们使用这些框架的时候只需要在 target 配置时进行指明就可以，非常方便
 */

/*
 因为 framework 的易用性，因此很多开发者都很喜欢类似的 “即拖即用，无需配置”的体验
 一些框架和库的开发者为了使用体验一般会用一些 第三方提供的方法 来模拟的生成行为类似的框架
 比如 Dropbox 或者 Facebook 的iOS SDK 都是基础这种技术完成的。
 
 // 但是要特别指出，虽然和 Apple 的框架的后缀名一样是 .framework,
 // 使用方式也类似，但是这些第三方框架都是实实在在的静态库
 // 每个 app 需要在编译的时候进行独立的链接
 */

/*
 从 Xcode6 开始 Apple 官方提供了单独制作类似的 framework 的方法
 这种便利性可能会使代码的组织方式发生重大变化
 
 我们可以在一个 app 项目中添加新的类型为 Cocoa Touch Framework 的 target
 并在同一个项目中通过 import 这个 target 的 module 名字
 (一般和这个 target 的名字是一样的，除非使用了一些像 中杠 _ 这样在 module 名中的非法字符)
 来引入并进行使用
 */

// ....


